// Mocks generated by Mockito 5.4.4 from annotations
// in brainshare/test/post/post_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:brainshare/model/post.dart' as _i4;
import 'package:brainshare/services/auth/auth_user.dart' as _i6;
import 'package:brainshare/services/user_content/post_service.dart' as _i3;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimestamp_1 extends _i1.SmartFake implements _i2.Timestamp {
  _FakeTimestamp_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i3.PostService {
  @override
  _i2.FirebaseFirestore get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  List<_i4.Post> get posts => (super.noSuchMethod(
        Invocation.getter(#posts),
        returnValue: <_i4.Post>[],
        returnValueForMissingStub: <_i4.Post>[],
      ) as List<_i4.Post>);

  @override
  set posts(List<_i4.Post>? _posts) => super.noSuchMethod(
        Invocation.setter(
          #posts,
          _posts,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<List<_i4.Post>> getItems() => (super.noSuchMethod(
        Invocation.method(
          #getItems,
          [],
        ),
        returnValue: _i5.Future<List<_i4.Post>>.value(<_i4.Post>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i4.Post>>.value(<_i4.Post>[]),
      ) as _i5.Future<List<_i4.Post>>);

  @override
  _i5.Future<void> fetchPosts() => (super.noSuchMethod(
        Invocation.method(
          #fetchPosts,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> fetchPostsById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchPostsById,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> fetchPostsFrom(String? uuid) => (super.noSuchMethod(
        Invocation.method(
          #fetchPostsFrom,
          [uuid],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> fetchPostsByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPostsByCategory,
          [category],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addPost(_i4.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #addPost,
          [post],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deletePost(_i4.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [post],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> likePost(
    _i4.Post? post,
    _i6.AuthUser? currentUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [
            post,
            currentUser,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> dislikePost(
    _i4.Post? post,
    _i6.AuthUser? currentUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #dislikePost,
          [
            post,
            currentUser,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Post].
///
/// See the documentation for Mockito's code generation for more information.
class MockPost extends _i1.Mock implements _i4.Post {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get author => (super.noSuchMethod(
        Invocation.getter(#author),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#author),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#author),
        ),
      ) as String);

  @override
  set author(String? _author) => super.noSuchMethod(
        Invocation.setter(
          #author,
          _author,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  set text(String? _text) => super.noSuchMethod(
        Invocation.setter(
          #text,
          _text,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Timestamp get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeTimestamp_1(
          this,
          Invocation.getter(#timestamp),
        ),
        returnValueForMissingStub: _FakeTimestamp_1(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as _i2.Timestamp);

  @override
  set timestamp(_i2.Timestamp? _timestamp) => super.noSuchMethod(
        Invocation.setter(
          #timestamp,
          _timestamp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get likes => (super.noSuchMethod(
        Invocation.getter(#likes),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  set likes(List<String>? _likes) => super.noSuchMethod(
        Invocation.setter(
          #likes,
          _likes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get category => (super.noSuchMethod(
        Invocation.getter(#category),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#category),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#category),
        ),
      ) as String);

  @override
  set category(String? _category) => super.noSuchMethod(
        Invocation.setter(
          #category,
          _category,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJSON() => (super.noSuchMethod(
        Invocation.method(
          #toJSON,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  DateTime parseDateString(String? dateString) => (super.noSuchMethod(
        Invocation.method(
          #parseDateString,
          [dateString],
        ),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.method(
            #parseDateString,
            [dateString],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_2(
          this,
          Invocation.method(
            #parseDateString,
            [dateString],
          ),
        ),
      ) as DateTime);
}
