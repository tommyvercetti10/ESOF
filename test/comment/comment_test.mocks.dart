// Mocks generated by Mockito 5.4.4 from annotations
// in brainshare/test/comment/comment_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:brainshare/model/comment.dart' as _i3;
import 'package:brainshare/services/user_content/comment_service.dart' as _i5;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimestamp_0 extends _i1.SmartFake implements _i2.Timestamp {
  _FakeTimestamp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_2 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Comment].
///
/// See the documentation for Mockito's code generation for more information.
class MockComment extends _i1.Mock implements _i3.Comment {
  @override
  String get author => (super.noSuchMethod(
        Invocation.getter(#author),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#author),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#author),
        ),
      ) as String);

  @override
  set author(String? _author) => super.noSuchMethod(
        Invocation.setter(
          #author,
          _author,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get receiverUid => (super.noSuchMethod(
        Invocation.getter(#receiverUid),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#receiverUid),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#receiverUid),
        ),
      ) as String);

  @override
  set receiverUid(String? _receiverUid) => super.noSuchMethod(
        Invocation.setter(
          #receiverUid,
          _receiverUid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isPost => (super.noSuchMethod(
        Invocation.getter(#isPost),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isPost(bool? _isPost) => super.noSuchMethod(
        Invocation.setter(
          #isPost,
          _isPost,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  set text(String? _text) => super.noSuchMethod(
        Invocation.setter(
          #text,
          _text,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Timestamp get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeTimestamp_0(
          this,
          Invocation.getter(#timestamp),
        ),
        returnValueForMissingStub: _FakeTimestamp_0(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as _i2.Timestamp);

  @override
  set timestamp(_i2.Timestamp? _timestamp) => super.noSuchMethod(
        Invocation.setter(
          #timestamp,
          _timestamp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get rating => (super.noSuchMethod(
        Invocation.getter(#rating),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  set rating(double? _rating) => super.noSuchMethod(
        Invocation.setter(
          #rating,
          _rating,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJSON() => (super.noSuchMethod(
        Invocation.method(
          #toJSON,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  DateTime parseDateString(String? dateString) => (super.noSuchMethod(
        Invocation.method(
          #parseDateString,
          [dateString],
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #parseDateString,
            [dateString],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.method(
            #parseDateString,
            [dateString],
          ),
        ),
      ) as DateTime);
}

/// A class which mocks [CommentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentService extends _i1.Mock implements _i5.CommentService {
  @override
  _i2.FirebaseFirestore get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  List<_i3.Comment> get comments => (super.noSuchMethod(
        Invocation.getter(#comments),
        returnValue: <_i3.Comment>[],
        returnValueForMissingStub: <_i3.Comment>[],
      ) as List<_i3.Comment>);

  @override
  set comments(List<_i3.Comment>? _comments) => super.noSuchMethod(
        Invocation.setter(
          #comments,
          _comments,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> fetchCommentsFrom(
    String? id,
    bool? isUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommentsFrom,
          [
            id,
            isUser,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addComment(_i3.Comment? comment) => (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<double> getAverageForUser(String? uuid) => (super.noSuchMethod(
        Invocation.method(
          #getAverageForUser,
          [uuid],
        ),
        returnValue: _i6.Future<double>.value(0.0),
        returnValueForMissingStub: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);
}
