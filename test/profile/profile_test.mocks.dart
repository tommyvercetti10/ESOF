// Mocks generated by Mockito 5.4.4 from annotations
// in brainshare/test/profile/profile_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;
import 'dart:ui' as _i7;

import 'package:brainshare/services/auth/auth_user.dart' as _i2;
import 'package:brainshare/services/profile/profile_update_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthUser_0 extends _i1.SmartFake implements _i2.AuthUser {
  _FakeAuthUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProfileUpdateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileUpdateService extends _i1.Mock
    implements _i3.ProfileUpdateService {
  @override
  _i4.Future<String> getDocId(String? uuid) => (super.noSuchMethod(
        Invocation.method(
          #getDocId,
          [uuid],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getDocId,
            [uuid],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getDocId,
            [uuid],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> updateBio(String? bio) => (super.noSuchMethod(
        Invocation.method(
          #updateBio,
          [bio],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updatePhotoURL(_i6.File? image) => (super.noSuchMethod(
        Invocation.method(
          #updatePhotoURL,
          [image],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateCvURL(_i6.File? file) => (super.noSuchMethod(
        Invocation.method(
          #updateCvURL,
          [file],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateStatus(String? status) => (super.noSuchMethod(
        Invocation.method(
          #updateStatus,
          [status],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> banUser(_i2.AuthUser? user) => (super.noSuchMethod(
        Invocation.method(
          #banUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.AuthUser> getProfile() => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _i4.Future<_i2.AuthUser>.value(_FakeAuthUser_0(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthUser>.value(_FakeAuthUser_0(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AuthUser>);
}

/// A class which mocks [AuthUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUser extends _i1.Mock implements _i2.AuthUser {
  @override
  String get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#uuid),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#uuid),
        ),
      ) as String);

  @override
  set uuid(String? _uuid) => super.noSuchMethod(
        Invocation.setter(
          #uuid,
          _uuid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  set username(String? _username) => super.noSuchMethod(
        Invocation.setter(
          #username,
          _username,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get photoURL => (super.noSuchMethod(
        Invocation.getter(#photoURL),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#photoURL),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#photoURL),
        ),
      ) as String);

  @override
  set photoURL(String? _photoURL) => super.noSuchMethod(
        Invocation.setter(
          #photoURL,
          _photoURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set bio(String? _bio) => super.noSuchMethod(
        Invocation.setter(
          #bio,
          _bio,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
      ) as String);

  @override
  set status(String? _status) => super.noSuchMethod(
        Invocation.setter(
          #status,
          _status,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isModerator(bool? _isModerator) => super.noSuchMethod(
        Invocation.setter(
          #isModerator,
          _isModerator,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isBanned(bool? _isBanned) => super.noSuchMethod(
        Invocation.setter(
          #isBanned,
          _isBanned,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cvURL(String? _cvURL) => super.noSuchMethod(
        Invocation.setter(
          #cvURL,
          _cvURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void updateUser(_i2.AuthUser? user) => super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
