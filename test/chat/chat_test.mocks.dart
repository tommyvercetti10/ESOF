// Mocks generated by Mockito 5.4.4 from annotations
// in brainshare/test/chat/chat_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i12;
import 'dart:io' as _i5;
import 'dart:typed_data' as _i13;
import 'dart:ui' as _i11;

import 'package:brainshare/model/chat.dart' as _i2;
import 'package:brainshare/model/post.dart' as _i9;
import 'package:brainshare/model/thread.dart' as _i3;
import 'package:brainshare/services/auth/auth_user.dart' as _i8;
import 'package:brainshare/services/chat/chat_service.dart' as _i6;
import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChat_0 extends _i1.SmartFake implements _i2.Chat {
  _FakeChat_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThread_1 extends _i1.SmartFake implements _i3.Thread {
  _FakeThread_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_2 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_3<T1 extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T1> {
  _FakeCollectionReference_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_4<T1 extends Object?> extends _i1.SmartFake
    implements _i4.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_5<T1 extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T1> {
  _FakeDocumentReference_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_6 extends _i1.SmartFake
    implements _i4.SnapshotMetadata {
  _FakeSnapshotMetadata_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_7 extends _i1.SmartFake implements _i5.File {
  _FakeFile_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_8 extends _i1.SmartFake implements Uri {
  _FakeUri_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_9 extends _i1.SmartFake implements _i5.Directory {
  _FakeDirectory_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_10 extends _i1.SmartFake
    implements _i5.FileSystemEntity {
  _FakeFileSystemEntity_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_11 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_12 extends _i1.SmartFake
    implements _i5.RandomAccessFile {
  _FakeRandomAccessFile_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_13 extends _i1.SmartFake implements _i5.IOSink {
  _FakeIOSink_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_14 extends _i1.SmartFake implements _i5.FileStat {
  _FakeFileStat_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimestamp_15 extends _i1.SmartFake implements _i4.Timestamp {
  _FakeTimestamp_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i6.ChatService {
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Stream<_i4.QuerySnapshot<Object?>> getChats(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChats,
          [userId],
        ),
        returnValue: _i7.Stream<_i4.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i7.Stream<_i4.QuerySnapshot<Object?>>.empty(),
      ) as _i7.Stream<_i4.QuerySnapshot<Object?>>);

  @override
  _i7.Stream<_i4.QuerySnapshot<Object?>> getMessages(
          _i4.DocumentReference<Object?>? ref) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [ref],
        ),
        returnValue: _i7.Stream<_i4.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i7.Stream<_i4.QuerySnapshot<Object?>>.empty(),
      ) as _i7.Stream<_i4.QuerySnapshot<Object?>>);

  @override
  _i7.Future<_i2.Chat> createChat(_i8.AuthUser? user2) => (super.noSuchMethod(
        Invocation.method(
          #createChat,
          [user2],
        ),
        returnValue: _i7.Future<_i2.Chat>.value(_FakeChat_0(
          this,
          Invocation.method(
            #createChat,
            [user2],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.Chat>.value(_FakeChat_0(
          this,
          Invocation.method(
            #createChat,
            [user2],
          ),
        )),
      ) as _i7.Future<_i2.Chat>);

  @override
  _i7.Future<_i3.Thread> createThread(
    String? title,
    String? desc,
    List<_i8.AuthUser>? members,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createThread,
          [
            title,
            desc,
            members,
          ],
        ),
        returnValue: _i7.Future<_i3.Thread>.value(_FakeThread_1(
          this,
          Invocation.method(
            #createThread,
            [
              title,
              desc,
              members,
            ],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.Thread>.value(_FakeThread_1(
          this,
          Invocation.method(
            #createThread,
            [
              title,
              desc,
              members,
            ],
          ),
        )),
      ) as _i7.Future<_i3.Thread>);

  @override
  _i7.Future<void> sendMessage(
    _i4.DocumentReference<Object?>? ref,
    String? text,
    _i5.File? file,
    _i9.Post? post,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            ref,
            text,
            file,
            post,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String> editThreadPhoto(
    _i3.Thread? thread,
    _i5.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editThreadPhoto,
          [
            thread,
            image,
          ],
        ),
        returnValue: _i7.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #editThreadPhoto,
            [
              thread,
              image,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #editThreadPhoto,
            [
              thread,
              image,
            ],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<void> editThreadTitle(
    _i3.Thread? thread,
    String? title,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editThreadTitle,
          [
            thread,
            title,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> editThreadDescription(
    _i3.Thread? thread,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editThreadDescription,
          [
            thread,
            description,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> editMessageText(
    _i4.DocumentSnapshot<Object?>? doc,
    String? newText,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editMessageText,
          [
            doc,
            newText,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteMessage(_i4.DocumentSnapshot<Object?>? doc) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [doc],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> likeMessage(
    _i4.DocumentSnapshot<Object?>? doc,
    _i8.AuthUser? currentUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeMessage,
          [
            doc,
            currentUser,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i4.CollectionReference<T> get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeCollectionReference_3<T>(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeCollectionReference_3<T>(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i4.CollectionReference<T>);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_3<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeCollectionReference_3<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i4.CollectionReference<Map<String, dynamic>>);

  @override
  _i7.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> update(Map<Object, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i4.DocumentSnapshot<T>> get([_i4.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i7.Future<_i4.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_4<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_4<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i7.Future<_i4.DocumentSnapshot<T>>);

  @override
  _i7.Stream<_i4.DocumentSnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i4.ListenSource? source = _i4.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i7.Stream<_i4.DocumentSnapshot<T>>.empty(),
        returnValueForMissingStub: _i7.Stream<_i4.DocumentSnapshot<T>>.empty(),
      ) as _i7.Stream<_i4.DocumentSnapshot<T>>);

  @override
  _i7.Future<void> set(
    T? data, [
    _i4.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i4.DocumentReference<R> withConverter<R>({
    required _i4.FromFirestore<R>? fromFirestore,
    required _i4.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeDocumentReference_5<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDocumentReference_5<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i4.DocumentReference<R>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i4.QuerySnapshot<T> {
  @override
  List<_i4.QueryDocumentSnapshot<T>> get docs => (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i4.QueryDocumentSnapshot<T>>[],
        returnValueForMissingStub: <_i4.QueryDocumentSnapshot<T>>[],
      ) as List<_i4.QueryDocumentSnapshot<T>>);

  @override
  List<_i4.DocumentChange<T>> get docChanges => (super.noSuchMethod(
        Invocation.getter(#docChanges),
        returnValue: <_i4.DocumentChange<T>>[],
        returnValueForMissingStub: <_i4.DocumentChange<T>>[],
      ) as List<_i4.DocumentChange<T>>);

  @override
  _i4.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_6(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_6(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.SnapshotMetadata);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i4.DocumentSnapshot<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i4.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_5<T>(
          this,
          Invocation.getter(#reference),
        ),
        returnValueForMissingStub: _FakeDocumentReference_5<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i4.DocumentReference<T>);

  @override
  _i4.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_6(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_6(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(
        Invocation.method(
          #get,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(
        Invocation.method(
          #[],
          [field],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i5.File {
  @override
  _i5.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_7(
          this,
          Invocation.getter(#absolute),
        ),
        returnValueForMissingStub: _FakeFile_7(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i5.File);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_8(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_8(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_9(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeDirectory_9(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i5.Directory);

  @override
  _i7.Future<_i5.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i7.Future<_i5.File>);

  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i5.File>);

  @override
  _i5.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_7(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_7(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i5.File);

  @override
  _i7.Future<_i5.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_10(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_10(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i5.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i5.File>);

  @override
  _i5.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_7(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_7(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i5.File);

  @override
  _i7.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
        returnValueForMissingStub: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i7.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i7.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
        returnValueForMissingStub: _i7.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i7.Future<DateTime>);

  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i7.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i7.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
        returnValueForMissingStub: _i7.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i7.Future<DateTime>);

  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i7.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.RandomAccessFile> open(
          {_i5.FileMode? mode = _i5.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i7.Future<_i5.RandomAccessFile>.value(_FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.RandomAccessFile>.value(_FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i7.Future<_i5.RandomAccessFile>);

  @override
  _i5.RandomAccessFile openSync({_i5.FileMode? mode = _i5.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
        returnValueForMissingStub: _FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i5.RandomAccessFile);

  @override
  _i7.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i7.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i7.Stream<List<int>>.empty(),
      ) as _i7.Stream<List<int>>);

  @override
  _i5.IOSink openWrite({
    _i5.FileMode? mode = _i5.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_13(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
        returnValueForMissingStub: _FakeIOSink_13(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i5.IOSink);

  @override
  _i7.Future<_i13.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i7.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
        returnValueForMissingStub:
            _i7.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i7.Future<_i13.Uint8List>);

  @override
  _i13.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i13.Uint8List(0),
        returnValueForMissingStub: _i13.Uint8List(0),
      ) as _i13.Uint8List);

  @override
  _i7.Future<String> readAsString(
          {_i12.Encoding? encoding = const _i12.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i7.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  String readAsStringSync({_i12.Encoding? encoding = const _i12.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
      ) as String);

  @override
  _i7.Future<List<String>> readAsLines(
          {_i12.Encoding? encoding = const _i12.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  List<String> readAsLinesSync(
          {_i12.Encoding? encoding = const _i12.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  _i7.Future<_i5.File> writeAsBytes(
    List<int>? bytes, {
    _i5.FileMode? mode = _i5.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i7.Future<_i5.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i5.FileMode? mode = _i5.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.File> writeAsString(
    String? contents, {
    _i5.FileMode? mode = _i5.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.File>.value(_FakeFile_7(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i7.Future<_i5.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i5.FileMode? mode = _i5.FileMode.write,
    _i12.Encoding? encoding = const _i12.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i7.Future<_i5.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i7.Future<_i5.FileStat>.value(_FakeFileStat_14(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileStat>.value(_FakeFileStat_14(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i7.Future<_i5.FileStat>);

  @override
  _i5.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_14(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_14(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i5.FileStat);

  @override
  _i7.Stream<_i5.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i7.Stream<_i5.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.FileSystemEvent>.empty(),
      ) as _i7.Stream<_i5.FileSystemEvent>);
}

/// A class which mocks [Thread].
///
/// See the documentation for Mockito's code generation for more information.
class MockThread extends _i1.Mock implements _i3.Thread {
  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
      ) as String);

  @override
  String get creator => (super.noSuchMethod(
        Invocation.getter(#creator),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#creator),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#creator),
        ),
      ) as String);

  @override
  _i4.Timestamp get creation => (super.noSuchMethod(
        Invocation.getter(#creation),
        returnValue: _FakeTimestamp_15(
          this,
          Invocation.getter(#creation),
        ),
        returnValueForMissingStub: _FakeTimestamp_15(
          this,
          Invocation.getter(#creation),
        ),
      ) as _i4.Timestamp);

  @override
  List<_i8.AuthUser> get members => (super.noSuchMethod(
        Invocation.getter(#members),
        returnValue: <_i8.AuthUser>[],
        returnValueForMissingStub: <_i8.AuthUser>[],
      ) as List<_i8.AuthUser>);

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJSON() => (super.noSuchMethod(
        Invocation.method(
          #toJSON,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AuthUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUser extends _i1.Mock implements _i8.AuthUser {
  @override
  String get uuid => (super.noSuchMethod(
        Invocation.getter(#uuid),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#uuid),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#uuid),
        ),
      ) as String);

  @override
  set uuid(String? _uuid) => super.noSuchMethod(
        Invocation.setter(
          #uuid,
          _uuid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  set username(String? _username) => super.noSuchMethod(
        Invocation.setter(
          #username,
          _username,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get photoURL => (super.noSuchMethod(
        Invocation.getter(#photoURL),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#photoURL),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#photoURL),
        ),
      ) as String);

  @override
  set photoURL(String? _photoURL) => super.noSuchMethod(
        Invocation.setter(
          #photoURL,
          _photoURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set bio(String? _bio) => super.noSuchMethod(
        Invocation.setter(
          #bio,
          _bio,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
      ) as String);

  @override
  set status(String? _status) => super.noSuchMethod(
        Invocation.setter(
          #status,
          _status,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isModerator(bool? _isModerator) => super.noSuchMethod(
        Invocation.setter(
          #isModerator,
          _isModerator,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isBanned(bool? _isBanned) => super.noSuchMethod(
        Invocation.setter(
          #isBanned,
          _isBanned,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cvURL(String? _cvURL) => super.noSuchMethod(
        Invocation.setter(
          #cvURL,
          _cvURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void updateUser(_i8.AuthUser? user) => super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
